Import('g_env')

# special defines for blas binary contraction backend
if g_env['blas'] != False:
  l_bin_cont_blas_defines = g_env['CPPDEFINES'].copy()
  if( g_env['blas_has_imatcopy'] != False ):
    l_bin_cont_blas_defines.append( 'PP_EINSUM_IR_HAS_BLAS_IMATCOPY' )
  if( g_env['blas'] == 'nvpl' ):
    l_bin_cont_blas_defines.append( 'PP_EINSUM_IR_HAS_BLAS_NVPL' )

  l_bin_cont_blas_sources = [ 'ContractionBackendBlas.cpp' ]

  for l_source in l_bin_cont_blas_sources:
    g_env.sources.append( g_env.Object( l_source,
                                        CPPDEFINES = l_bin_cont_blas_defines ) )

# default files
l_sources = [ 'IterationSpace.cpp',
              'ContractionBackend.cpp',
              'ContractionBackendScalar.cpp',
              'ContractionOptimizer.cpp',
              'ContractionMemoryManager.cpp' ]

if g_env['libxsmm'] != False:
  l_sources += [ 'ContractionBackendTpp.cpp' ]


l_tests = [ 'IterationSpace.test.cpp',
            'ContractionOptimizer.test.cpp']

if g_env['libtorch'] != False:
  l_tests += [ 'ContractionBackendScalar.test.torch.cpp' ]

if g_env['libxsmm'] != False and g_env['libtorch'] != False:
  l_tests += [ 'ContractionBackendTpp.test.torch.cpp' ]

if g_env['blas'] != False and g_env['libtorch'] != False:
  l_tests += [ 'ContractionBackendBlas.test.torch.cpp' ]


for l_source in l_sources:
  g_env.sources.append( g_env.Object( l_source ) )

for l_test in l_tests:
  g_env.tests.append( g_env.Object( l_test ) )

Export('g_env')